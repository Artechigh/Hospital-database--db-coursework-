// "npx prisma studio"
// "npx prisma format"
// "npx prisma generate" (to update packages for prismaFunctions if schema.prisma was changed)

// "npx prisma db pull"
// "npx prisma db push" (to update database provider if schema.prisma was changed)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  address String
  phone   String
  doctors Doctor[] @relation("HospitalDoctor")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  birthDate DateTime
  gender    String
  Doctor    Doctor?
  Patient   Patient?
}

model Doctor {
  id           Int           @id @default(autoincrement())
  specialty    String
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?          @unique
  hospitals    Hospital[]    @relation("HospitalDoctor")
  appointments Appointment[]
  schedules Schedule[]
} 

model Schedule {
  id Int @id @default(autoincrement())
  workhours String
  doctorId Int
  doctor Doctor @relation(fields: [doctorId], references: [id])
  hospitalId Int
}

model Patient {
  id           Int           @id @default(autoincrement())
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?          @unique
  appointments Appointment[] 
}

model Appointment {
  id            Int            @id @default(autoincrement())
  date          DateTime
  reason        String
  hospitalId    Int
  doctorId      Int
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  patientId     Int
  patient       Patient        @relation(fields: [patientId], references: [id])
  prescriptions Prescription[]
}

model Prescription {
  id            Int          @id @default(autoincrement())
  name          String
  dosage        String
  instructions  String
  doctorId      Int
  patientId     Int
  appointmentId Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
} 